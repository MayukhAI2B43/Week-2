Spirally traversing a matrix
Difficulty: Medium  Accuracy: 35.2%  Submissions: 325K+  Points: 4
You are given a rectangular matrix mat[][] of size n x m, and your task is to return an array while traversing the matrix in spiral form.

Examples:

Input: mat[][] = [[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12], 
                [13, 14, 15, 16]]
Output: [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]
Explanation: 

Input: mat[][] = [[2, 7, 10],
                [5, 1, 3],
                [4, 2, 8]]
Output: [2, 7, 10, 3, 8, 2, 4, 5, 1]
Explanation: Applying same technique as shown above.
Input: mat[][] = [[32, 44, 27, 23],
                [54, 28, 50, 62]]
Output: [32, 44, 27, 23, 62, 50, 28, 54]
Explanation: Applying same technique as shown above, output will be [32, 44, 27, 23, 62, 50, 28, 54].
Constraints:
1 ≤ n, m ≤1000
0 ≤ mat[i][j] ≤100

Expected Complexities
Time Complexity: O(n * m)
Auxiliary Space: O(1)
Company Tags
Paytm  Flipkart  Morgan Stanley  Microsoft  OYO Rooms  Snapdeal  D-E-Shaw  MakeMyTrip  Oracle  MAQ Software  Adobe  nearbuy  Nagarro  BrowserStack  Salesforce  Zoho
Topic Tags
Arrays  Matrix  Data Structures



Code in Python3:-
class Solution:
    def spirallyTraverse(self, mat):
        result = []
        top = 0
        bottom = len(mat) - 1
        left = 0
        right = len(mat[0]) - 1
        
        while top <= bottom and left <= right:
            # Traverse from left to right
            for i in range(left, right + 1):
                result.append(mat[top][i])
            top += 1
            
            # Traverse from top to bottom
            for i in range(top, bottom + 1):
                result.append(mat[i][right])
            right -= 1
            
            # Traverse from right to left
            if top <= bottom:
                for i in range(right, left - 1, -1):
                    result.append(mat[bottom][i])
                bottom -= 1
            
            # Traverse from bottom to top
            if left <= right:
                for i in range(bottom, top - 1, -1):
                    result.append(mat[i][left])
                left += 1
        
        return result



























//Code in C:-
#include <stdio.h>

void spiralPrint(int rows, int cols, int arr[rows][cols]) {
    int top = 0, bottom = rows - 1;
    int left = 0, right = cols - 1;

    while (top <= bottom && left <= right) {
        // Print top row
        for (int i = left; i <= right; i++)
            printf("%d ", arr[top][i]);
        top++;

        // Print right column
        for (int i = top; i <= bottom; i++)
            printf("%d ", arr[i][right]);
        right--;

        // Print bottom row
        if (top <= bottom) {
            for (int i = right; i >= left; i--)
                printf("%d ", arr[bottom][i]);
            bottom--;
        }

        // Print left column
        if (left <= right) {
            for (int i = bottom; i >= top; i--)
                printf("%d ", arr[i][left]);
            left++;
        }
    }
}

int main() {
    int matrix[4][4] = {
        {1,  2,  3,  4},
        {5,  6,  7,  8},
        {9, 10, 11, 12},
        {13,14, 15, 16}
    };
    
    spiralPrint(4, 4, matrix);
    return 0;
}
